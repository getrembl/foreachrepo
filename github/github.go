package github

import (
	"net/http"
	"net/url"
	"fmt"
	"encoding/json"
	"strconv"
	"log"
	"bytes"
	"errors"
)

type GitUserConfig struct {
	Username string
	Password string
}

type Repo struct {
	Name     string
	GitUrl   string
	PullsUrl string
}

type HttpGetter interface {
	Get(url string) (*http.Response, error)
}

type HttpPoster interface {
	Post(url string, body []byte) (*http.Response, error)
}

type AuthHttpInterface struct {
	Username string
	Password string
}

func (A *AuthHttpInterface) Get(url string) (*http.Response, error) {
	req, err := http.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}
	req.SetBasicAuth(A.Username, A.Password)
	return http.DefaultClient.Do(req)
}
func (A *AuthHttpInterface) Post(url string, body []byte) (*http.Response, error) {
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(body))
	if err != nil {
		return nil, err
	}
	req.SetBasicAuth(A.Username, A.Password)
	return http.DefaultClient.Do(req)
}

func getJson(httpGetter HttpGetter, url string, target interface{}) error {
	r, err := httpGetter.Get(url)

	if err != nil {
		return err
	}
	defer r.Body.Close()

	return json.NewDecoder(r.Body).Decode(target)
}

func postJson(httpPoster HttpPoster, url string, input interface{}, output interface{}) error {
	jsonStr, err := json.Marshal(input)
	if err != nil {
		return err
	}

	resp, err := httpPoster.Post(url, jsonStr)
	if err != nil {
		return err
	}
	defer resp.Body.Close()
	return json.NewDecoder(resp.Body).Decode(output)
}

type githubApiRepoDescription struct {
	Name      string
	Ssh_url   string
	Pulls_url string
}

func removeSuffix(str string, suffix string) string {
	suffixStart := len(str) - len(suffix)
	if str[suffixStart:] != suffix {
		panic(errors.New("<" + str + "> doesn't end with <" + suffix + ">"))
	}
	return str[:suffixStart]
}

func appendPageRepos(getter HttpGetter, repos *[]Repo, pageUrl *url.URL, i int) (int, error) {
	query := pageUrl.Query()
	query.Set("page", strconv.Itoa(i))
	query.Set("per_page", "50")
	pageUrl.RawQuery = query.Encode()

	log.Print("Loading page ", i)

	page := make([]githubApiRepoDescription, 0)
	err := getJson(getter, pageUrl.String(), &page)
	if err != nil {
		return 0, err
	}

	for _, repoDescription := range page {

		repo := Repo{
			Name:repoDescription.Name,
			GitUrl:repoDescription.Ssh_url,
			PullsUrl: removeSuffix(repoDescription.Pulls_url, "{/number}"),
		}

		*repos = append(*repos, repo)
	}
	return len(page), nil
}

func GetReposList(getter HttpGetter, organization string) ([]Repo, error) {
	pageUrl := &url.URL{
		Scheme:"https",
		Host:"api.github.com",
		Path:fmt.Sprintf("orgs/%v/repos", organization),
	}
	repos := []Repo{}
	for i := 1; ; i++ {
		count, err := appendPageRepos(getter, &repos, pageUrl, i)
		if err != nil {
			return nil, err
		}
		if count == 0 {
			return repos, nil
		}
	}
}

type githubPullDescription struct {
	Html_url string
}

func CreatePullRequest(poster HttpPoster, repo Repo, branch string, title string) string {
	input := map[string]string{
		"title": title,
		"body": "Generated by foreachrepo",
		"head": branch,
		"base": "master",
	}
	result := &githubPullDescription{}
	err := postJson(poster, repo.PullsUrl, input, result)
	if err != nil {
		panic(err)
	}
	return result.Html_url
}
